use super::matrix::*;

const CAMERA_PTR: *mut CCamera = 0xB6F028 as _;

#[repr(C)]
#[derive(Debug)]
pub struct CCam {
    pub m_bBelowMinDist: bool,
    pub m_bBehindPlayerDesired: bool,
    pub m_bCamLookingAtVector: bool,
    pub m_bCollisionChecksOn: bool,
    pub m_bFixingBeta: bool,
    pub m_bTheHeightFixerVehicleIsATrain: bool,
    pub m_bLookBehindCamWasInFront: bool,
    pub m_bLookingBehind: bool,
    pub m_bLookingLeft: bool,
    pub m_bLookingRight: bool,
    pub m_bResetStatics: bool,
    pub m_bRotating: bool,
    pub m_nMode: u16,
    pub _pad: [std::os::raw::c_char; 2],
    pub m_nFinishTime: std::os::raw::c_uint,
    pub m_nDoCollisionChecksOnFrameNum: std::os::raw::c_uint,
    pub m_nDoCollisionCheckEveryNumOfFrames: std::os::raw::c_uint,
    pub m_nFrameNumWereAt: std::os::raw::c_uint,
    pub m_nRunningVectorArrayPos: std::os::raw::c_uint,
    pub m_nRunningVectorCounter: std::os::raw::c_uint,
    pub m_nDirectionWasLooking: std::os::raw::c_uint,
    pub m_fMaxRoleAngle: f32,
    pub m_fRoll: f32,
    pub m_fRollSpeed: f32,
    pub m_fSyphonModeTargetZOffSet: f32,
    pub m_fAmountFractionObscured: f32,
    pub m_fAlphaSpeedOverOneFrame: f32,
    pub m_fBetaSpeedOverOneFrame: f32,
    pub m_fBufferedTargetBeta: f32,
    pub m_fBufferedTargetOrientation: f32,
    pub m_fBufferedTargetOrientationSpeed: f32,
    pub m_fCamBufferedHeight: f32,
    pub m_fCamBufferedHeightSpeed: f32,
    pub m_fCloseInPedHeightOffset: f32,
    pub m_fCloseInPedHeightOffsetSpeed: f32,
    pub m_fCloseInCarHeightOffset: f32,
    pub m_fCloseInCarHeightOffsetSpeed: f32,
    pub m_fDimensionOfHighestNearCar: f32,
    pub m_fDistanceBeforeChanges: f32,
    pub m_fFovSpeedOverOneFrame: f32,
    pub m_fMinDistAwayFromCamWhenInterPolating: f32,
    pub m_fPedBetweenCameraHeightOffset: f32,
    pub m_fPlayerInFrontSyphonAngleOffSet: f32,
    pub m_fRadiusForDead: f32,
    pub m_fRealGroundDist: f32,
    pub m_fTargetBeta: f32,
    pub m_fTimeElapsedFloat: f32,
    pub m_fTilt: f32,
    pub m_fTiltSpeed: f32,
    pub m_fTransitionBeta: f32,
    pub m_fTrueBeta: f32,
    pub m_fTrueAlpha: f32,
    pub m_fInitialPlayerOrientation: f32,
    pub m_fVerticalAngle: f32,
    pub m_fAlphaSpeed: f32,
    pub m_fFOV: f32,
    pub m_fFOVSpeed: f32,
    pub m_fHorizontalAngle: f32,
    pub m_fBetaSpeed: f32,
    pub m_fDistance: f32,
    pub m_fDistanceSpeed: f32,
    pub m_fCaMinDistance: f32,
    pub m_fCaMaxDistance: f32,
    pub m_fSpeedVar: f32,
    pub m_fCameraHeightMultiplier: f32,
    pub m_fTargetZoomGroundOne: f32,
    pub m_fTargetZoomGroundTwo: f32,
    pub m_fTargetZoomGroundThree: f32,
    pub m_fTargetZoomOneZExtra: f32,
    pub m_fTargetZoomTwoZExtra: f32,
    pub m_fTargetZoomTwoInteriorZExtra: f32,
    pub m_fTargetZoomThreeZExtra: f32,
    pub m_fTargetZoomZCloseIn: f32,
    pub m_fMinRealGroundDist: f32,
    pub m_fTargetCloseInDist: f32,
    pub m_fBeta_Targeting: f32,
    pub m_fX_Targetting: f32,
    pub m_fY_Targetting: f32,
    pub m_pCarWeAreFocussingOn: *mut (),  // CVehicle
    pub m_pCarWeAreFocussingOnI: *mut (), // CVehicle
    pub m_fCamBumpedHorz: f32,
    pub m_fCamBumpedVert: f32,
    pub m_nCamBumpedTime: std::os::raw::c_uint,
    pub m_vecSourceSpeedOverOneFrame: CVector,
    pub m_vecTargetSpeedOverOneFrame: CVector,
    pub m_vecUpOverOneFrame: CVector,
    pub m_vecTargetCoorsForFudgeInter: CVector,
    pub m_vecCamFixedModeVector: CVector,
    pub m_vecCamFixedModeSource: CVector,
    pub m_vecCamFixedModeUpOffSet: CVector,
    pub m_vecLastAboveWaterCamPosition: CVector,
    pub m_vecBufferedPlayerBodyOffset: CVector,
    pub m_vecFront: CVector,
    pub m_vecSource: CVector,
    pub m_vecSourceBeforeLookBehind: CVector,
    pub m_vecUp: CVector,
    pub m_avecPreviousVectors: [CVector; 2],
    pub m_avecTargetHistoryPos: [CVector; 4],
    pub m_anTargetHistoryTime: [std::os::raw::c_uint; 4],
    pub m_nCurrentHistoryPoints: std::os::raw::c_uint,
    pub m_pCamTargetEntity: *mut (), // CEntity
    pub m_fCameraDistance: f32,
    pub m_fIdealAlpha: f32,
    pub m_fPlayerVelocity: f32,
    pub m_pLastCarEntered: *mut (),  // CVehicle
    pub m_pLastPedLookedAt: *mut (), // CPed
    pub m_bFirstPersonRunAboutActive: bool,
}

#[repr(C, packed)]
#[derive(Debug)]
pub struct CQueuedMode {
    pub m_nMode: std::os::raw::c_ushort,
    pub m_fDuration: f32,
    pub m_nMinZoom: std::os::raw::c_ushort,
    pub m_nMaxZoom: std::os::raw::c_ushort,
}

#[repr(C, packed)]
#[derive(Debug)]
pub struct CCamPathSplines {
    pub m_pArrPathData: *mut f32,
}

#[repr(C, packed)]
#[derive(Debug)]
pub struct CCamera {
    pub _base: CPlaceable,
    pub m_bAboveGroundTrainNodesLoaded: bool,
    pub m_bBelowGroundTrainNodesLoaded: bool,
    pub m_bCamDirectlyBehind: bool,
    pub m_bCamDirectlyInFront: bool,
    pub m_bCameraJustRestored: bool,
    pub m_bcutsceneFinished: bool,
    pub m_bCullZoneChecksOn: bool,
    pub m_bFirstPersonBeingUsed: bool,
    pub m_bJustJumpedOutOf1stPersonBecauseOfTarget: bool,
    pub m_bIdleOn: bool,
    pub m_bInATunnelAndABigVehicle: bool,
    pub m_bInitialNodeFound: bool,
    pub m_bInitialNoNodeStaticsSet: bool,
    pub m_bIgnoreFadingStuffForMusic: bool,
    pub m_bPlayerIsInGarage: bool,
    pub m_bPlayerWasOnBike: bool,
    pub m_bJustCameOutOfGarage: bool,
    pub m_bJustInitalised: bool,
    pub m_bJust_Switched: bool,
    pub m_bLookingAtPlayer: bool,
    pub m_bLookingAtVector: bool,
    pub m_bMoveCamToAvoidGeom: bool,
    pub m_bObbeCinematicPedCamOn: bool,
    pub m_bObbeCinematicCarCamOn: bool,
    pub m_bRestoreByJumpCut: bool,
    pub m_bUseNearClipScript: bool,
    pub m_bStartInterScript: bool,
    pub m_bStartingSpline: bool,
    pub m_bTargetJustBeenOnTrain: bool,
    pub m_bTargetJustCameOffTrain: bool,
    pub m_bUseSpecialFovTrain: bool,
    pub m_bUseTransitionBeta: bool,
    pub m_bUseScriptZoomValuePed: bool,
    pub m_bUseScriptZoomValueCar: bool,
    pub m_bWaitForInterpolToFinish: bool,
    pub m_bItsOkToLookJustAtThePlayer: bool,
    pub m_bWantsToSwitchWidescreenOff: bool,
    pub m_bWideScreenOn: bool,
    pub m_b1rstPersonRunCloseToAWall: bool,
    pub m_bHeadBob: bool,
    pub m_bVehicleSuspenHigh: bool,
    pub m_bEnable1rstPersonCamCntrlsScript: bool,
    pub m_bAllow1rstPersonWeaponsCamera: bool,
    pub m_bCooperativeCamMode: bool,
    pub m_bAllowShootingWith2PlayersInCar: bool,
    pub m_bDisableFirstPersonInCar: bool,
    pub m_nModeForTwoPlayersSeparateCars: std::os::raw::c_ushort,
    pub m_nModeForTwoPlayersSameCarShootingAllowed: std::os::raw::c_ushort,
    pub m_nModeForTwoPlayersSameCarShootingNotAllowed: std::os::raw::c_ushort,
    pub m_nModeForTwoPlayersNotBothInCar: std::os::raw::c_ushort,
    pub m_bGarageFixedCamPositionSet: bool,
    pub m_bDoingSpecialInterPolation: bool,
    pub m_bScriptParametersSetForInterPol: bool,
    pub m_bFading: bool,
    pub m_bMusicFading: bool,
    pub m_bMusicFadedOut: bool,
    pub m_bFailedCullZoneTestPreviously: bool,
    pub m_bFadeTargetIsSplashScreen: bool,
    pub m_bWorldViewerBeingUsed: bool,
    pub m_bTransitionJUSTStarted: bool,
    pub m_bTransitionState: bool,
    pub m_nActiveCam: std::os::raw::c_uchar,
    pub _pad5A: [std::os::raw::c_char; 2],
    pub m_nCamShakeStart: std::os::raw::c_uint,
    pub m_nFirstPersonCamLastInputTime: std::os::raw::c_uint,
    pub m_nLongestTimeInMill: std::os::raw::c_uint,
    pub m_nNumberOfTrainCamNodes: std::os::raw::c_uint,
    pub m_nTimeLastChange: std::os::raw::c_uint,
    pub m_nTimeWeLeftIdle_StillNoInput: std::os::raw::c_uint,
    pub m_nTimeWeEnteredIdle: std::os::raw::c_uint,
    pub m_nTimeTransitionStart: std::os::raw::c_uint,
    pub m_nTransitionDuration: std::os::raw::c_uint,
    pub m_nTransitionDurationTargetCoors: std::os::raw::c_uint,
    pub m_nBlurBlue: std::os::raw::c_uint,
    pub m_nBlurGreen: std::os::raw::c_uint,
    pub m_nBlurRed: std::os::raw::c_uint,
    pub m_nBlurType: std::os::raw::c_uint,
    pub m_nWorkOutSpeedThisNumFrames: std::os::raw::c_uint,
    pub m_nNumFramesSoFar: std::os::raw::c_uint,
    pub m_nCurrentTrainCamNode: std::os::raw::c_uint,
    pub m_nMotionBlur: std::os::raw::c_uint,
    pub m_nMotionBlurAddAlpha: std::os::raw::c_uint,
    pub m_nCheckCullZoneThisNumFrames: std::os::raw::c_uint,
    pub m_nZoneCullFrameNumWereAt: std::os::raw::c_uint,
    pub m_nWhoIsInControlOfTheCamera: std::os::raw::c_uint,
    pub m_nCarZoom: std::os::raw::c_uint,
    pub m_fCarZoomBase: f32,
    pub m_fCarZoomTotal: f32,
    pub m_fCarZoomSmoothed: f32,
    pub m_fCarZoomValueScript: f32,
    pub m_nPedZoom: std::os::raw::c_uint,
    pub m_fPedZoomBase: f32,
    pub m_fPedZoomTotal: f32,
    pub m_fPedZoomSmoothed: f32,
    pub m_fPedZoomValueScript: f32,
    pub m_fCamFrontXNorm: f32,
    pub m_fCamFrontYNorm: f32,
    pub m_fDistanceToWater: f32,
    pub m_fHeightOfNearestWater: f32,
    pub m_fFOVDuringInter: f32,
    pub m_fLODDistMultiplier: f32,
    pub m_fGenerationDistMultiplier: f32,
    pub m_fAlphaSpeedAtStartInter: f32,
    pub m_fAlphaWhenInterPol: f32,
    pub m_fAlphaDuringInterPol: f32,
    pub m_fBetaDuringInterPol: f32,
    pub m_fBetaSpeedAtStartInter: f32,
    pub m_fBetaWhenInterPol: f32,
    pub m_fFOVWhenInterPol: f32,
    pub m_fFOVSpeedAtStartInter: f32,
    pub m_fStartingBetaForInterPol: f32,
    pub m_fStartingAlphaForInterPol: f32,
    pub m_fPedOrientForBehindOrInFront: f32,
    pub m_fCameraAverageSpeed: f32,
    pub m_fCameraSpeedSoFar: f32,
    pub m_fCamShakeForce: f32,
    pub m_fFovForTrain: f32,
    pub m_fFOV_Wide_Screen: f32,
    pub m_fNearClipScript: f32,
    pub m_fOldBetaDiff: f32,
    pub m_fPositionAlongSpline: f32,
    pub m_fScreenReductionPercentage: f32,
    pub m_fScreenReductionSpeed: f32,
    pub m_fAlphaForPlayerAnim1rstPerson: f32,
    pub m_fOrientation: f32,
    pub m_fPlayerExhaustion: f32,
    pub m_fSoundDistUp: f32,
    pub m_fSoundDistUpAsRead: f32,
    pub m_fSoundDistUpAsReadOld: f32,
    pub m_fAvoidTheGeometryProbsTimer: f32,
    pub m_nAvoidTheGeometryProbsDirn: std::os::raw::c_ushort,
    pub _pad16A: [std::os::raw::c_char; 2],
    pub m_fWideScreenReductionAmount: f32,
    pub m_fStartingFOVForInterPol: f32,
    pub m_aCams: [CCam; 3],
    pub m_pToGarageWeAreIn: *mut (),                        // CGarage
    pub m_pToGarageWeAreInForHackAvoidFirstPerson: *mut (), // CGarage
    pub m_PlayerMode: CQueuedMode,
    pub m_PlayerWeaponMode: CQueuedMode,
    pub m_vecPreviousCameraPosition: CVector,
    pub m_vecRealPreviousCameraPosition: CVector,
    pub m_vecAimingTargetCoors: CVector,
    pub m_vecFixedModeVector: CVector,
    pub m_vecFixedModeSource: CVector,
    pub m_vecFixedModeUpOffSet: CVector,
    pub m_vecCutSceneOffset: CVector,
    pub m_vecStartingSourceForInterPol: CVector,
    pub m_vecStartingTargetForInterPol: CVector,
    pub m_vecStartingUpForInterPol: CVector,
    pub m_vecSourceSpeedAtStartInter: CVector,
    pub m_vecTargetSpeedAtStartInter: CVector,
    pub m_vecUpSpeedAtStartInter: CVector,
    pub m_vecSourceWhenInterPol: CVector,
    pub m_vecTargetWhenInterPol: CVector,
    pub m_vecUpWhenInterPol: CVector,
    pub m_vecClearGeometryVec: CVector,
    pub m_vecGameCamPos: CVector,
    pub m_vecSourceDuringInter: CVector,
    pub m_vecTargetDuringInter: CVector,
    pub m_vecUpDuringInter: CVector,
    pub m_vecAttachedCamOffset: CVector,
    pub m_vecAttachedCamLookAt: CVector,
    pub m_fAttachedCamAngle: f32,
    pub m_pRwCamera: *mut (),       // RwCamera
    pub m_pTargetEntity: *mut (),   // CEntity
    pub m_pAttachedEntity: *mut (), // CEntity
    pub m_aPathArray: [CCamPathSplines; 4],
    pub m_bMirrorActive: bool,
    pub m_bResetOldMatrix: bool,
    pub _pad972: [std::os::raw::c_char; 2],
    pub m_mCameraMatrix: RwMatrix,
    pub m_mCameraMatrixOld: RwMatrix,
    pub m_mViewMatrix: RwMatrix,
    pub m_mMatInverse: RwMatrix,
    pub m_mMatMirrorInverse: RwMatrix,
    pub m_mMatMirror: RwMatrix,
    pub m_avecFrustumNormals: [CVector; 4],
    pub m_avecFrustumWorldNormals: [CVector; 4],
    pub m_avecFrustumWorldNormals_Mirror: [CVector; 4],
    pub m_fFrustumPlaneOffsets: [f32; 4],
    pub m_fFrustumPlaneOffsets_Mirror: [f32; 4],
    #[doc = "!< unused?"]
    pub m_vecRightFrustumNormal: CVector,
    #[doc = "!< unused?"]
    pub m_vecBottomFrustumNormal: CVector,
    #[doc = "!< unused?"]
    pub m_vecTopFrustumNormal: CVector,
    #[doc = "!< unused?"]
    pub field_BF8: f32,
    pub m_fFadeAlpha: f32,
    pub m_fEffectsFaderScalingFactor: f32,
    pub m_fFadeDuration: f32,
    pub m_fTimeToFadeMusic: f32,
    pub m_fTimeToWaitToFadeMusic: f32,
    pub m_fFractionInterToStopMoving: f32,
    pub m_fFractionInterToStopCatchUp: f32,
    pub m_fFractionInterToStopMovingTarget: f32,
    pub m_fFractionInterToStopCatchUpTarget: f32,
    pub m_fGaitSwayBuffer: f32,
    pub m_fScriptPercentageInterToStopMoving: f32,
    pub m_fScriptPercentageInterToCatchUp: f32,
    pub m_nScriptTimeForInterPolation: std::os::raw::c_uint,
    pub m_nFadeInOutFlag: std::os::raw::c_ushort,
    pub _padC32: [std::os::raw::c_char; 2],
    pub m_nModeObbeCamIsInForCar: std::os::raw::c_int,
    pub m_nModeToGoTo: std::os::raw::c_short,
    pub m_nMusicFadingDirection: std::os::raw::c_short,
    pub m_nTypeOfSwitch: std::os::raw::c_short,
    pub _padC3E: [std::os::raw::c_char; 2],
    pub m_nFadeStartTime: std::os::raw::c_uint,
    pub m_nFadeTimeStartedMusic: std::os::raw::c_uint,
    pub m_nExtraEntitiesCount: std::os::raw::c_int,
    pub m_pExtraEntity: [*mut (); 2], // CEntity
    pub m_fDuckCamMotionFactor: f32,
    pub m_fDuckAimCamMotionFactor: f32,
    pub m_fTrackLinearStartTime: f32,
    pub m_fTrackLinearEndTime: f32,
    pub m_vecTrackLinearEndPoint: CVector,
    pub m_vecTrackLinearStartPoint: CVector,
    pub m_bTrackLinearWithEase: bool,
    pub field_C7D: std::os::raw::c_char,
    pub field_C7E: std::os::raw::c_char,
    pub field_C7F: std::os::raw::c_char,
    pub m_vecTrackLinear: CVector,
    pub m_bVecTrackLinearProcessed: bool,
    pub field_C8D: std::os::raw::c_char,
    pub field_C8E: std::os::raw::c_char,
    pub field_C8F: std::os::raw::c_char,
    pub m_fShakeIntensity: f32,
    pub m_fStartShakeTime: f32,
    pub m_fEndShakeTime: f32,
    pub field_C9C: std::os::raw::c_int,
    pub m_nShakeType: std::os::raw::c_int,
    pub m_fStartZoomTime: f32,
    pub m_fEndZoomTime: f32,
    pub m_fZoomInFactor: f32,
    pub m_fZoomOutFactor: f32,
    pub m_nZoomMode: std::os::raw::c_uchar,
    pub m_bFOVLerpProcessed: bool,
    pub field_CB6: std::os::raw::c_char,
    pub field_CB7: std::os::raw::c_char,
    pub m_fFOVNew: f32,
    pub m_fMoveLinearStartTime: f32,
    pub m_fMoveLinearEndTime: f32,
    pub m_vecMoveLinearPosnStart: CVector,
    pub m_vecMoveLinearPosnEnd: CVector,
    pub m_bMoveLinearWithEase: bool,
    pub field_CDD: std::os::raw::c_char,
    pub field_CDE: std::os::raw::c_char,
    pub field_CDF: std::os::raw::c_char,
    pub m_vecMoveLinear: CVector,
    pub m_bVecMoveLinearProcessed: bool,
    pub m_bBlockZoom: bool,
    pub m_bCameraPersistPosition: bool,
    pub m_bCameraPersistTrack: bool,
    pub m_bCinemaCamera: bool,
    pub field_CF1: std::os::raw::c_char,
    pub field_CF2: std::os::raw::c_char,
    pub field_CF3: std::os::raw::c_char,
    pub m_aCamTweak: [CCamera__bindgen_ty_1; 5],
    pub m_bCameraVehicleTweaksInitialized: bool,
    pub _padD45: [std::os::raw::c_char; 3],
    pub m_fCurrentTweakDistance: f32,
    pub m_fCurrentTweakAltitude: f32,
    pub m_fCurrentTweakAngle: f32,
    pub m_nCurrentTweakModelIndex: std::os::raw::c_int,
    pub field_D58: std::os::raw::c_int,
    pub field_D5C: std::os::raw::c_int,
    pub field_D60: std::os::raw::c_int,
    pub field_D64: std::os::raw::c_int,
    pub field_D68: std::os::raw::c_int,
    pub field_D6C: std::os::raw::c_int,
    pub field_D70: std::os::raw::c_int,
    pub field_D74: std::os::raw::c_int,
}

#[repr(C)]
#[derive(Debug)]
pub struct CCamera__bindgen_ty_1 {
    pub m_nModelIndex: std::os::raw::c_int,
    pub m_fDistance: f32,
    pub m_fAltitude: f32,
    pub m_fAngle: f32,
}

impl CCamera {
    pub fn get<'a>() -> &'a CCamera {
        unsafe { &*CAMERA_PTR }
    }

    pub fn matrix(&self) -> RwMatrix {
        unsafe { self._base.m_matrix.read() }
    }
}
